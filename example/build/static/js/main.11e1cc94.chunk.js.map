{"version":3,"sources":["../../src/store/utils.ts","../../src/store/constants.ts","../../src/store/actions.ts","../../src/util/XML2Json/index.ts","../../src/util/GeoGebraStoreManagement/index.ts","../../src/util/XML2Json/perspectiveXML2Json.ts","../../src/util/XML2Json/viewsXML2Json.ts","../../src/util/GeoGebraListener/clientEventsListener.ts","../../src/util/GeoGebraListener/index.ts","../../src/store/hooks.ts","../../src/components/ReactGeoGebra/index.tsx","../../src/util/GeoGebraListener/addElementListener.ts","../../src/util/GeoGebraListener/removeElementListener.ts","../../src/util/GeoGebraListener/renameElementListener.ts","../../src/util/GeoGebraListener/updateElementListener.ts","../../src/util/set-geogebra-script.ts","../../src/store/reducer.ts","../../src/store/configure-store.ts","../../src/store/index.ts","../../src/util/mode-constants.ts","../../src/components/ReactGeoGebraProvider/index.tsx","../../src/index.ts","App.tsx","index.tsx"],"names":["createAction","type","payload","addElementToStore","element","removeElementFromStore","name","renameElementInStore","rename","updateElementInStore","addNameToSelctedElements","deselectElements","removeElementsAtCancel","names","setModeInStore","mode","setPerspectiveInStore","perspective","setMouseDowninStore","mouse","setEuclidianViewsInStore","setEuclidianView3DInStore","euclidianView3D","setAlgebraViewInStore","algebraView","setSpreadsheetViewInStore","spreadsheetView","setProbabilityCalculatorInStore","xmlParser","ignoreAttributes","preserveOrder","attributeNamePrefix","parseAttributeValue","unpairedTags","processEntities","setPerspective","store","actions","xml","json","Array","perspectiveXML2Json","setEuclidianViews","euclidianViewXML2Json","euclidianView3DXML2Json","setPropabilityCalculator","probabilityCalculatorXML2Json","setAlgebraView","algebraViewXML2Json","setSpreadsheetView","spreadsheetViewXML2Json","clientEventListener","app","removeElementsAtCancelFunc","state","throttledClientListenerFunc","throttle","console","clientObj","x","y","z","viewNo","Number","getElementFromGeoGebraApp","perspectiveXML","xml2Store","objName","objectType","coordinates","value","color","isVisible","valueString","definitionString","commandString","LaTeXString","isExisting","isDefined","objectNumber","CASobjectNumber","layer","lineStyle","lineThickness","pointStyle","pointSize","filling","caption","labelStyle","isLabelVisible","isIndependent","isMoveable","useStoreState","Geogebra","reduxUseDispatch","props","refProps","useRef","id","LoadComponent","onReady","appletOnLoad","debug","children","React","url","useState","deployggbLoaded","setDeployggbLoaded","loading","setLoading","watchPropsChange","setWatchPropsChange","useStoreRedux","onAppletReady","window","initializeStore","addElementListener","removeElementListener","oldName","newName","renameElementListener","throttledUpdateFunc","updateElementListener","useEffect","Promise","ready","reject","Error","tag","document","script","resolve","setScript","parameter","JSON","ggbApp","appName","width","height","showToolBar","showAlgebraInput","showMenuBar","reactGeogebraReducer","initialState","action","geoGebraElement","el","elements","updatedElement","selEl","selectedElementNames","intersectingElements","mouseDown","euclidianViews","probabilityCalculator","configureStore","preloadedState","createStore","params","editorState","content","caret","undefined","ReactGeoGebraProvider","useMemo","Provider","ReactGeoGebra","App","log","className","src","ReactDOM","render","getElementById"],"mappings":"6TAKgBA,EAAaC,EAAcC,GACzC,MAAO,CAAED,KAAF,EAAQC,WCLV,ICcMC,EAAoB,SAACC,GAAD,OAC/BJ,EDfK,uBCc0B,IAGpBK,EAAyB,SAACC,GAAD,OACpCN,EDhBK,4BCe+B,IAGzBO,EAAuB,SAACC,GAAD,OAClCR,EDlBK,0BCiB6B,IAGvBS,EAAuB,SAACL,GAAD,OAClCJ,EDvBK,0BCsB6B,IAMvBU,EAA2B,SAACJ,GAAD,OACtCN,EDzBK,gCCwBiC,IAE3BW,EAAmB,kBAC9BX,EDzBK,uCC2BMY,EAAyB,SAACC,GAAD,OACpCb,ED7BK,4BC4B+B,IAGzBc,EAAiB,SAACC,GAAD,OAC5Bf,ED7BK,oBC4BuB,IAEjBgB,EAAwB,SAACC,GAAD,OACnCjB,ED9BK,2BC6B8B,IAGxBkB,EAAsB,SAACC,GAAD,OACjCnB,ED/BK,yBC8B4B,IAGtBoB,EAA2B,SAAC,GAAD,OAEnCpB,EDjCE,8BC+BiC,IAI3BqB,EAA4B,SAACC,GAAD,OACvCtB,EDnCK,+BCkCkC,IAG5BuB,EAAwB,SAACC,GAAD,OACnCxB,EDpCK,2BCmC8B,IAGxByB,EAA4B,SAACC,GAAD,OACvC1B,EDtCK,+BCqCkC,IAE5B2B,EAAkC,SAAC,GAAD,OAG7C3B,EDzCK,qCCsCwC,IChDlC4B,EAAY,IAAI,EAAJ,UARF,CACrBC,kBADqB,EAErBC,eAFqB,EAGrBC,oBAHqB,GAIrBC,qBAJqB,EAKrBC,aAAc,CAAC,OAAQ,OAAQ,UAAW,QALrB,WAMrBC,iBAAiB,ICyBNC,EAAiB,SAAC,EAAD,GAI5BC,WACEC,ECnCoC,SAACC,GACvC,IAAMC,EAAOX,QAAb,GACMX,EAA2BsB,EAAjC,YAKA,OAJAtB,QAAoBuB,cAAcD,oBAAdC,gBACZD,oBADYC,MAEhB,CAACD,oBAFLtB,MAGAA,kBAAwBsB,oBAAxBtB,MACA,ED4BgCwB,CADhCL,MAKWM,EAAoB,SAAC,EAAD,GAI/BN,WAAeC,EEhCyB,SAACC,GACzC,IAAMC,EAAOX,QAAb,GACA,OAAOY,cAAcD,WAAdC,eACHD,WADGC,cAEH,CAACD,WAFL,eF8BgDI,CAAhDP,KACAA,WACEC,EE3BwC,SAACC,GAE3C,OADaV,QAAb,GACOW,SAAP,gBFyBoCK,CADpCR,MAKWS,EAA2B,SAAC,EAAD,GAItCT,WACEC,EErB8C,SAACC,GAEjD,OADaV,QAAb,GACOW,SAAP,sBFmB0CO,CAD1CV,MAKWW,EAAiB,SAACT,EAAD,GAC5BF,WAAeC,EEpCuB,SAACC,GAEvC,OADaV,QAAb,GACOW,SAAP,YFkC6CS,CAA7CZ,MAEWa,EAAqB,SAAC,EAAD,GAIhCb,WACEC,EEtCwC,SAACC,GAE3C,OADaV,QAAb,GACOW,SAAP,gBFoCoCW,CADpCd,MG5DWe,EAAsB,SAACC,EAAD,GACjC,MACA,IAAMC,EAA6B,WACjC,IAAMxC,EAAQuC,EAAd,oBACME,EAA4BlB,EAAlC,WACIvB,WAAiByC,WAArB,QACAlB,WAAeC,EAAfD,KAGImB,EAA8BC,YAAS,KAAK,GAAO,YAEvD,OADAC,eACQC,EAAR,MACE,eAEA,iBAGA,yBAIA,2BAEA,iBACE,MACF,eAEEL,IACAjB,WAAeC,KACf,MACF,cAEA,qBAEA,0BAEA,qBAEA,qBAEA,kBAGA,iBAEA,aACE,MACF,gBACE,IAAMlB,EAAe,CACnBwC,EAAGD,EADgB,EAEnBE,EAAGF,EAFgB,EAGnBG,EAAGH,KAHgB,EAInBI,OAAQJ,gBAA8BA,EAAUI,QAElD1B,WAAeC,EAAfD,IACA,MACF,gBAEA,iBAEA,iBAEA,eAEA,gBAEA,wBAGA,WAEA,mBAEA,kBAEA,qBAEA,kBACE,MACF,aACEA,WAAeC,EAAiCqB,EAAhDtB,SACA,MACF,cACEA,WAAeC,EAAuB0B,OAAOL,EAA7CtB,YACAiB,IACA,MACF,wBAEA,mBAGA,sBAEA,sBAEA,yBAEA,yBAEA,WACE,MACF,kBACE,IAAMjD,EAAU4D,EAA0BZ,EAAKM,EAA/C,QACAtB,WAAeC,EAAfD,IACA,MACF,wBACA,oBACA,qBH9FmB,SAAC,EAAD,KAKvBD,EAAe8B,EAAf9B,GACAO,EAAkBJ,EAAlBI,GACAK,EAAeT,EAAfS,GACAF,EAAyBP,EAAzBO,GACAI,EAAmBX,EAAnBW,GGwFMiB,CAFYd,EAAZ,SACuBA,EAAvB,oBACAc,OAQNd,8BC5HWY,EAA4B,SAACZ,EAAD,GAEvC,MAAc,MADK,CAAE9C,KAAM6D,GAAW,IAEtC,IAAMC,EAAahB,gBAAnB,GACIiB,OAAJ,EACA,UACE,YACEA,EAAc,CACZV,EAAGP,YADS,GAEZQ,EAAGR,YAFS,GAGZS,EAAGT,gBAwCT,MA/ByB,CACvB9C,KADuB,EAEvB+D,YAFuB,EAGvBC,MAAOlB,WAHgB,GAKvBmB,MAAOnB,WALgB,GAMvBoB,UAAWpB,aANY,GAOvBqB,YAAarB,iBAPU,GAQvBsB,iBAAkBtB,sBARK,GASvBuB,cAAevB,mBATQ,GAUvBwB,YAAaxB,iBAVU,GAavBgB,WAbuB,EAcvBS,WAAYzB,SAdW,GAevB0B,UAAW1B,YAfY,GAgBvB2B,aAAc3B,kBAhBS,GAiBvB4B,gBAAiB5B,qBAjBM,GAkBvB6B,MAAO7B,WAlBgB,GAmBvB8B,UAAW9B,eAnBY,GAoBvB+B,cAAe/B,mBApBQ,GAqBvBgC,WAAYhC,gBArBW,GAsBvBiC,UAAWjC,eAtBY,GAuBvBkC,QAASlC,aAvBc,GAwBvBmC,QAASnC,aAxBc,GAyBvBoC,WAAYpC,gBAzBW,GA0BvBqC,eAAgBrC,kBA1BO,GA2BvBsC,cAAetC,gBA3BQ,GA4BvBuC,WAAYvC,kBCQhB,IAAawC,EAtCN,ICNDC,GDiD4CC,ICjDH,SAACC,GAC9C,IAAMC,EAAWC,iBAAjB,GAEA,EAA0DD,EAA1D,QAAME,EAAN,KAAUC,EAAV,gBAAyBC,EAAzB,UAAkCC,EAAlC,eAAgDC,EAAhD,QACA,IACEJ,gBAEF,IACEI,MAGF,IACEH,EAAgB,gBAAGI,EAAH,kBAAkBC,4BAAlB,KAGlB,IAAMC,EAAN,yCACA,EAA8CC,oBAA9C,GAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA8BF,oBAA9B,GAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAgDJ,oBAAhD,GAAOK,EAAP,KAAyBC,EAAzB,KACM5E,ED2BQ6E,cCzBRC,EAAgB,WACpB,GAAkBb,IAClB,IAAMjD,EAAM+D,OAAZ,GACA,KN1B2B,SAAC/D,EAAD,GAC7B,IAAMd,EAAMc,EAAZ,SACMa,EAAiBb,EAAvB,oBACAjB,EAAe8B,EAAf9B,GACAO,EAAkBJ,EAAlBI,GACAK,EAAeT,EAAfS,GACAF,EAAyBP,EAAzBO,GACAI,EAAmBX,EAAnBW,GMsBEmE,CAAgBhE,EAAhBgE,GCpC8B,SAAChE,EAAD,GAChC,GACAA,uBAAwB,YACtB,IAAMhD,EAAU4D,EAA0BZ,EAA1C,GAEAhB,WAAeC,EAAfD,ODiCAiF,CAAmBjE,EAAnBiE,GEvCiC,SAAC,EAAD,GAInC,GACAjE,0BAA2B,YACzBhB,WAAeC,EAAfD,OFkCAkF,CAAsBlE,EAAtBkE,GGxCiC,SAAC,EAAD,GAInC,GACAlE,0BAA2B,cACzBhB,WAAe,EAA6B,CAAEmF,QAAF,EAAWC,gBHmCvDC,CAAsBrE,EAAtBqE,GIvCiC,SAAC,EAAD,GAInC,MAEA,IAAMC,EAAsBlE,YAAS,KAAK,GAAO,YAC/C,IAAMpD,EAAU4D,EAA0BZ,EAA1C,GACAhB,WAAeC,EAAfD,OAGFgB,6BJ6BEuE,CAAsBvE,EAAtBuE,GACAxE,EAAoBC,EAApBD,GAEA,GAAaiD,IACbE,GAAS7C,iCAAT6C,gBA0CF,OAvCAsB,qBAAU,WAUR,OATA,GKrDqB,SAAC,EAAD,UAIvB,IAAIC,SAAQ,cACV,IAAIC,GAAJ,EACA,UACEC,EAAO,IAAIC,MAAXD,6BAGF,IAAME,EAAMC,wCAAZ,GACMC,EAASD,uBAAf,UAEAC,iBACAA,KAAejC,EAAfiC,UACAA,yBACAA,QACAA,SAAgB,WACd,IACEL,KACAM,OAIJD,UAAiB,YACfJ,EAAO,IAAIC,MAAM,yBAAjBD,KAGFI,UAAiB,YACfJ,EAAO,IAAIC,MAAM,2BAAjBD,KAGF,MAAIE,cAEFA,kCLoBAI,CAAU5B,EAAV,SACQ,WACJH,GACE7C,8BADF6C,oCAEAM,SAJJ,OAMS,mBAASnD,cAAT,MAEJ,WACLmD,MAEA,IAAMqB,EAAMC,wBAA2BhC,EAAvC,WACI+B,GAAOA,EAAX,YACEA,+BAfNL,IAoBAA,qBAAU,WACR,GAAIT,OAAJ,UAAsB,CACpB,IAAMmB,EAAYC,WAAWA,eAAevC,EAA5C,UACAsC,iBACe,IAAInB,OAAJ,aAAf,GACAqB,UACA1B,MACAE,MACAV,GACE7C,iCADF6C,sCAGF,OAAO,WACL,IAAM2B,EAAMC,wBAA2BhC,EAAvC,WACI+B,GAAOA,EAAX,YACEA,+BAGH,CAACtB,EAjBJiB,IAoBE,yBAAK1B,GAAOA,EAAL,WACJW,GAAWL,yBADd,WAEE,yBAAKN,GAAIA,OAKfL,eAAwB,CACtB4C,QADsB,UAEtBC,MAFsB,IAGtBC,OAHsB,IAItBC,aAJsB,EAKtBC,kBALsB,EAMtBC,aAAa,G,+MMpGf,IAAMC,EAAuB,SAAC,EAAD,GAI3B,YAHAzF,UAAQ0F,GAGAC,EAAR,MACE,IfTG,uBeUD,IAAMC,EAAkBD,EAAxB,QACA,SACI3F,EAAA,cAAmB,mBAAQ6F,EAAR,QAAnB,SAA6CD,EAAjD,MACS5F,EAEK,QAEZ8F,SAAU9F,uBANiBA,EAU/B,IfnBG,4BeoBD,IAAMhD,EAAO2I,EAAb,QACA,SACc,QAEZG,SAAU9F,EAAA,iBAAsB,mBAAalD,SAAb,OAHhBkD,EAOpB,If3BG,0Be4BD,IAAM9C,EAASyI,EAAf,QACA,SACc,QAEZG,SAAU9F,EAAA,cAAmB,YAC3B,eAEEhD,KACEF,SAAiBI,EAAjBJ,QAAkCI,EAAlCJ,QAAmDA,EAAQE,YAP/CgD,EAatB,If5CG,0Be6CD,IAAM+F,EAAiBJ,EAAvB,QACA,SACc,QAEZG,SAAU9F,EAAA,cAAmB,YAC3B,OAAOlD,SAAiBiJ,EAAjBjJ,OAAP,OAJwBkD,EAS9B,IfnDG,gCeoDD,IAAMhD,EAAO2I,EAAb,QACA,SACI3F,EAAA,2BAAgC,mBAAWgG,IAAX,KAC3BhG,EACK,QAEZiG,qBAAsBjG,uBAClBA,8BADkBA,GAElB,CAAC,KAPWA,EAWpB,If9DG,qCemED,OAJc,QAEZiG,qBAAsB,KAI1B,IftEG,4BeuED,IAAM1I,EAAQoI,EAAd,QACA,MAAY,OAAO3F,EACnB,IAAMkG,EAAuBlG,EAAA,iBAAsB,mBACjDzC,WAAeT,EADkC,SAQnD,OAJc,QAEZgJ,SAAUI,IAId,IfhFG,oBeiFD,IAAMzI,EAAOkI,EAAb,QACA,SACc,QAAmClI,SAD/BuC,EAIpB,IfrFG,2BesFD,IAAMrC,EAAcgI,EAApB,QACA,SACc,QAAmChI,gBADxBqC,EAI3B,IfzFG,yBe0FD,IAAMmG,EAAYR,EAAlB,QACA,SACA,QAAmBQ,cADInG,EAGzB,If5FG,8Be6FD,IAAMoG,EAAiBT,EAAvB,QACA,SACA,QAAmBS,mBADSpG,EAG9B,IfhGG,+BeiGD,IAAMhC,EAAkB2H,EAAxB,QACA,SACA,QAAmB3H,oBADUgC,EAG/B,IfnGG,2BeoGD,IAAM9B,EAAcyH,EAApB,QACA,SACA,QAAmBzH,gBADM8B,EAG3B,IfvGG,+BewGD,IAAM5B,EAAkBuH,EAAxB,QACA,SACA,QAAmBvH,oBADU4B,EAG/B,If3GG,qCe4GD,IAAMqG,EAAwBV,EAA9B,QACA,SACA,QAAmBU,0BADgBrG,EAGrC,If7GG,mBe8GH,QACE,W,SCjIkBsG,EACtBC,GAGA,OADcC,YAAYf,EAA1B,GCHF,IACaC,EAAmC,CAC9C9C,GAFF,YAGEkD,SAF8C,GAG9CG,qBAH8C,GAI9CQ,OAAQ,CACN7D,GANJ,YAOIwC,MAFM,IAGNC,OAHM,IAINE,kBAJM,EAKND,aALM,EAMNE,aAAa,GAEf/H,KCjBK,EDkBLE,iBAb8C,EAc9C+I,YAAa,CAAEC,QAAF,GAAeC,MAAO,CAAC,IACpCT,eAAWU,GEdPC,GFiBeR,EAArB,GEjBuD,SAAC,G,IAAErD,aAClDnE,EAAQiI,mBAAQ,WACpB,OAAOT,EAAP,KADF,IAIA,OAAO,uBAAUxH,MAAOA,GAAxB,KAGFgI,sC,ICZaA,EAAwBE,EACxBC,EAAN,ECmBQC,G,MAnBH,WACV,IAAMlH,EAAQsC,GAAc,SAACtC,GAAD,OAAWA,KAMvC,OAJAsE,qBAAU,WACRnE,QAAQgH,IAAInH,KACX,CAACA,IAGF,yBAAKoH,UAAU,OACb,4DACA,kBAACH,EAAD,CAAerE,GAAG,YAAYwC,MAAO,MACrC,yBAAKgC,UAAU,aACb,2CACA,kBAAC,IAAD,CAAWC,IAAKrH,EAAOhD,KAAK,cCXpCsK,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF3C,SAAS4C,eAAe,W","file":"static/js/main.11e1cc94.chunk.js","sourcesContent":["export function createAction<T extends string>(type: T): { type: T }\nexport function createAction<T extends string, P extends any>(\n  type: T,\n  payload: P\n): { type: T; payload?: P }\nexport function createAction(type: string, payload?: any) {\n  return { type, payload }\n}\n","/* Snippet rec */\nexport const ADD_ELEMENT_TO_STORE = 'ADD_ELEMENT_TO_STORE'\nexport const UPDATE_ELEMENT_IN_STORE = 'UPDATE_ELEMENT_IN_STORE'\nexport const REMOVE_ELEMENT_FROM_STORE = 'REMOVE_ELEMENT_FROM_STORE'\nexport const RENAME_ELEMENT_IN_STORE = 'RENAME_ELEMENT_IN_STORE'\n\nexport const ADD_NAME_TO_SELECTED_ELEMENTS = 'ADD_NAME_TO_SELECTED_ELEMENTS'\nexport const REMOVE_ELEMENTS_AT_CANCEL = 'REMOVE_ELEMENTS_AT_CANCEL'\nexport const REMOVE_NAME_FROM_SELECTED_ELEMENTS =\n  'REMOVE_NAME_FROM_SELECTED_ELEMENTS'\nexport const SET_MODE_IN_STORE = 'SET_MODE_IN_STORE'\nexport const SET_PERSPECTIVE_IN_STORE = 'SET_PERSPECTIVE_IN_STORE'\n\nexport const SET_MOUSEDOWN_IN_STORE = 'SET_MOUSEDOWN_IN_STORE'\n\nexport const SET_EUCLIDIANVIEWS_IN_STORE = 'SET_EUCLIDIANVIEWS_IN_STORE'\nexport const SET_EUCLIDIANVIEW3D_IN_STORE = 'SET_EUCLIDIANVIEW3D_IN_STORE'\n\nexport const SET_ALGEBRAVIEW_IN_STORE = 'SET_ALGEBRAVIEW_IN_STORE'\nexport const SET_SPREADSHEETVIEW_IN_STORE = 'SET_SPREADSHEETVIEW_IN_STORE'\nexport const SET_PROBABILITYCALCULATOR_IN_STORE =\n  'SET_PROBABILITYCALCULATOR_IN_STORE'\n//export const RESET_SELECTED_ELEMENTS = 'RESET_SELECTED_ELEMENTS'\nexport const ON_APPLET_LOADED = 'ON_APPLET_LOADED'\nexport const SET_ON_CONNECT = 'SET_ON_CONNECT'\n","import { createAction } from './utils'\nimport {\n  Element,\n  OnAppletLoadedFunc,\n  Rename,\n  Perspective,\n  Mouse,\n  EuclidianView,\n  EuclidianView3D,\n  AlgebraView,\n  ProbabilityCalculator,\n  SpreadsheetView\n} from '../types'\nimport * as constants from './constants'\n\nexport const addElementToStore = (element: Element) =>\n  createAction(constants.ADD_ELEMENT_TO_STORE, element)\n\nexport const removeElementFromStore = (name: string) =>\n  createAction(constants.REMOVE_ELEMENT_FROM_STORE, name)\n\nexport const renameElementInStore = (rename: Rename) =>\n  createAction(constants.RENAME_ELEMENT_IN_STORE, rename)\n\nexport const updateElementInStore = (element?: Element) =>\n  createAction(constants.UPDATE_ELEMENT_IN_STORE, element)\n\nexport const onAppletLoaded = (onLoaded: OnAppletLoadedFunc) =>\n  createAction(constants.ON_APPLET_LOADED, { onLoaded })\n\nexport const addNameToSelctedElements = (name?: string) =>\n  createAction(constants.ADD_NAME_TO_SELECTED_ELEMENTS, name)\nexport const deselectElements = () =>\n  createAction(constants.REMOVE_NAME_FROM_SELECTED_ELEMENTS)\n\nexport const removeElementsAtCancel = (names: Array<string>) =>\n  createAction(constants.REMOVE_ELEMENTS_AT_CANCEL, names)\n\nexport const setModeInStore = (mode: number) =>\n  createAction(constants.SET_MODE_IN_STORE, mode)\nexport const setPerspectiveInStore = (perspective: Perspective) =>\n  createAction(constants.SET_PERSPECTIVE_IN_STORE, perspective)\n\nexport const setMouseDowninStore = (mouse: Mouse) =>\n  createAction(constants.SET_MOUSEDOWN_IN_STORE, mouse)\n\nexport const setEuclidianViewsInStore = (\n  euclidianViews: Array<EuclidianView>\n) => createAction(constants.SET_EUCLIDIANVIEWS_IN_STORE, euclidianViews)\n\nexport const setEuclidianView3DInStore = (euclidianView3D: EuclidianView3D) =>\n  createAction(constants.SET_EUCLIDIANVIEW3D_IN_STORE, euclidianView3D)\n\nexport const setAlgebraViewInStore = (algebraView: AlgebraView) =>\n  createAction(constants.SET_ALGEBRAVIEW_IN_STORE, algebraView)\n\nexport const setSpreadsheetViewInStore = (spreadsheetView: SpreadsheetView) =>\n  createAction(constants.SET_SPREADSHEETVIEW_IN_STORE, spreadsheetView)\nexport const setProbabilityCalculatorInStore = (\n  probabilityCalculator: ProbabilityCalculator\n) =>\n  createAction(\n    constants.SET_PROBABILITYCALCULATOR_IN_STORE,\n    probabilityCalculator\n  )\n\nexport type ReactGeoGebraAction = ReturnType<\n  | typeof onAppletLoaded\n  | typeof addElementToStore\n  | typeof removeElementFromStore\n  | typeof renameElementInStore\n  | typeof updateElementInStore\n  | typeof addNameToSelctedElements\n  | typeof deselectElements\n  | typeof removeElementsAtCancel\n  | typeof setModeInStore\n  | typeof setPerspectiveInStore\n  | typeof setMouseDowninStore\n  | typeof setEuclidianViewsInStore\n  | typeof setEuclidianView3DInStore\n  | typeof setAlgebraViewInStore\n  | typeof setProbabilityCalculatorInStore\n  | typeof setSpreadsheetViewInStore\n>\n","import { XMLParser } from 'fast-xml-parser'\n\nconst parsingOptions = {\n  ignoreAttributes: false,\n  preserveOrder: false,\n  attributeNamePrefix: '',\n  parseAttributeValue: true,\n  unpairedTags: ['view', 'pane', 'toolbar', 'input', 'dockBar'],\n  processEntities: true\n}\nexport const xmlParser = new XMLParser(parsingOptions)\nexport * from './viewsXML2Json'\nexport * from './perspectiveXML2Json'\n","import { AnyAction, Store } from 'redux'\nimport {\n  algebraViewXML2Json,\n  euclidianView3DXML2Json,\n  euclidianViewXML2Json,\n  perspectiveXML2Json,\n  probabilityCalculatorXML2Json,\n  spreadsheetViewXML2Json\n} from '../XML2Json'\nimport * as actions from '../../store/actions'\n\nexport const initializeStore = (app: any, store: Store<any, AnyAction>) => {\n  const xml = app.getXML()\n  const perspectiveXML = app.getPerspectiveXML()\n  setPerspective(perspectiveXML, store)\n  setEuclidianViews(xml, store)\n  setAlgebraView(xml, store)\n  setPropabilityCalculator(xml, store)\n  setSpreadsheetView(xml, store)\n}\n\nexport const xml2Store = (\n  xml: string,\n  perspectiveXML: string,\n  store: Store<any, AnyAction>\n) => {\n  setPerspective(perspectiveXML, store)\n  setEuclidianViews(xml, store)\n  setAlgebraView(xml, store)\n  setPropabilityCalculator(xml, store)\n  setSpreadsheetView(xml, store)\n}\n\nexport const setPerspective = (\n  perspectiveXML: string,\n  store: Store<any, AnyAction>\n) => {\n  store.dispatch(\n    actions.setPerspectiveInStore(perspectiveXML2Json(perspectiveXML))\n  )\n}\n\nexport const setEuclidianViews = (\n  xml: string,\n  store: Store<any, AnyAction>\n) => {\n  store.dispatch(actions.setEuclidianViewsInStore(euclidianViewXML2Json(xml)))\n  store.dispatch(\n    actions.setEuclidianView3DInStore(euclidianView3DXML2Json(xml))\n  )\n}\n\nexport const setPropabilityCalculator = (\n  xml: string,\n  store: Store<any, AnyAction>\n) => {\n  store.dispatch(\n    actions.setProbabilityCalculatorInStore(probabilityCalculatorXML2Json(xml))\n  )\n}\n\nexport const setAlgebraView = (xml: string, store: Store<any, AnyAction>) => {\n  store.dispatch(actions.setAlgebraViewInStore(algebraViewXML2Json(xml)))\n}\nexport const setSpreadsheetView = (\n  xml: string,\n  store: Store<any, AnyAction>\n) => {\n  store.dispatch(\n    actions.setSpreadsheetViewInStore(spreadsheetViewXML2Json(xml))\n  )\n}\n","import { xmlParser } from '.'\nimport { Perspective } from '../../types'\n\nexport const perspectiveXML2Json: any = (xml: string) => {\n  const json = xmlParser.parse(xml)\n  const perspective: Perspective = json.perspective\n  perspective.panes = Array.isArray(json.perspective.panes.pane)\n    ? [...json.perspective.panes.pane]\n    : [json.perspective.panes.pane]\n  perspective.views = [...json.perspective.views.view]\n  return perspective\n}\n","import { xmlParser } from '.'\n// import { XMLParser } from 'fast-xml-parser'\n// import { allViews } from './dummy'\n//\n// const parsingOptions = {\n//   ignoreAttributes: false,\n//   preserveOrder: false,\n//   attributeNamePrefix: '',\n//   parseAttributeValue: true,\n//   unpairedTags: ['view', 'pane', 'toolbar', 'input', 'dockBar'],\n//   processEntities: true\n// }\n// const xmlParser = new XMLParser(parsingOptions)\n\nexport const euclidianViewXML2Json: any = (xml: string) => {\n  const json = xmlParser.parse(xml)\n  return Array.isArray(json.geogebra.euclidianView)\n    ? json.geogebra.euclidianView\n    : [json.geogebra.euclidianView]\n}\n\nexport const euclidianView3DXML2Json: any = (xml: string) => {\n  const json = xmlParser.parse(xml)\n  return json.geogebra.euclidianView3D\n}\n\nexport const algebraViewXML2Json: any = (xml: string) => {\n  const json = xmlParser.parse(xml)\n  return json.geogebra.algebraView\n}\n\nexport const spreadsheetViewXML2Json: any = (xml: string) => {\n  const json = xmlParser.parse(xml)\n  return json.geogebra.spreadsheetView\n}\n\nexport const probabilityCalculatorXML2Json: any = (xml: string) => {\n  const json = xmlParser.parse(xml)\n  return json.geogebra.probabilityCalculator\n}\n","import { AnyAction, Store } from 'redux'\n\nimport { ReactGeoGebraState, Mouse } from '../../types'\nimport * as actions from '../../store/actions'\nimport { getElementFromGeoGebraApp } from '.'\nimport { throttle } from 'throttle-debounce'\nimport { xml2Store } from '../GeoGebraStoreManagement'\n\nexport const clientEventListener = (app: any, store: Store<any, AnyAction>) => {\n  if (!app) return\n  const removeElementsAtCancelFunc = () => {\n    const names = app.getAllObjectNames()\n    const state: ReactGeoGebraState = store.getState()\n    if (names.length === state.elements.length) return\n    store.dispatch(actions.removeElementsAtCancel(names))\n  }\n\n  const throttledClientListenerFunc = throttle(250, false, (clientObj) => {\n    console.log(clientObj)\n    switch (clientObj.type) {\n      case 'addMacro':\n        break\n      case 'addPolygon':\n        //addPolygon undefined undefined\n        break\n      case 'addPolygonComplete':\n        //addPolygonComplete name name\n\n        break\n      case 'algebraPanelSelected':\n        break\n      case 'deleteGeos':\n        break\n      case 'deselect':\n        //deselect undefined undefined\n        removeElementsAtCancelFunc()\n        store.dispatch(actions.deselectElements())\n        break\n      case 'dragEnd':\n        break\n      case 'dropdownClosed':\n        break\n      case 'dropdownItemFocused':\n        break\n      case 'dropdownOpened':\n        break\n      case 'editorKeyTyped':\n        break\n      case 'editorStart':\n        //is called after Loading the Applet\n        break\n      case 'editorStop':\n        break\n      case 'export':\n        break\n      case 'mouseDown':\n        const mouse: Mouse = {\n          x: clientObj.x,\n          y: clientObj.y,\n          z: clientObj.z || 0,\n          viewNo: clientObj.viewNo === 2 ? 16 : clientObj.viewNo\n        }\n        store.dispatch(actions.setMouseDowninStore(mouse))\n        break\n      case 'movedGeos':\n        break\n      case 'movingGeos':\n        break\n      case 'openDialog':\n        break\n      case 'openMenu':\n        break\n      case 'pasteElms':\n        break\n      case 'pasteElmsComplete':\n        break\n\n      case 'redo':\n        break\n      case 'relationTool':\n        break\n      case 'removeMacro':\n        break\n      case 'renameComplete':\n        break\n      case 'renameMacro':\n        break\n      case 'select':\n        store.dispatch(actions.addNameToSelctedElements(clientObj.target))\n        break\n      case 'setMode':\n        store.dispatch(actions.setModeInStore(Number(clientObj.argument)))\n        removeElementsAtCancelFunc()\n        break\n      case 'showNavigationBar':\n        break\n      case 'showStyleBar':\n        //showStyleBar undefined [true,1] | [false,1] 1-> Graphics 1, 2->Algebra, 4->Spreadsheet, 8->CAS, 16->Graphics 2, 512->Graphics3D\n        break\n      case 'sidePanelClosed':\n        break\n      case 'sidePanelOpened':\n        break\n      case 'tablePanelSelected':\n        break\n      case 'toolsPanelSelected':\n        break\n      case 'undo':\n        break\n      case 'updateStyle':\n        const element = getElementFromGeoGebraApp(app, clientObj.target)\n        store.dispatch(actions.updateElementInStore(element))\n        break\n      case 'perspectiveChange':\n      case 'viewChanged3D':\n      case 'viewChanged2D':\n        const xml = app.getXML()\n        const perspectiveXML = app.getPerspectiveXML()\n        xml2Store(xml, perspectiveXML, store)\n        break\n\n      default:\n        break\n    }\n  })\n\n  app.registerClientListener(throttledClientListenerFunc)\n}\n","import { Element } from '../../types'\n\nexport const getElementFromGeoGebraApp = (app: any, objName?: string) => {\n  const e: Element = { name: objName || '' }\n  if (!objName) return e\n  const objectType = app.getObjectType(objName)\n  let coordinates = undefined\n  switch (objectType) {\n    case 'point':\n      coordinates = {\n        x: app.getXcoord(objName),\n        y: app.getYcoord(objName),\n        z: app.getZcoord(objName)\n      }\n      break\n    case 'list':\n      break\n    default:\n      break\n  }\n\n  const element: Element = {\n    name: objName,\n    coordinates,\n    value: app.getValue(objName),\n    //listValue: app.getListValue(objName),\n    color: app.getColor(objName),\n    isVisible: app.getVisible(objName),\n    valueString: app.getValueString(objName),\n    definitionString: app.getDefinitionString(objName),\n    commandString: app.getCommandString(objName),\n    LaTeXString: app.getLaTeXString(objName),\n    //LaTeXBase64Definition: app.getLaTeXBase64(objName, false),\n    //LaTeXBase64Value: app.getLaTeXBase64(objName, true),\n    objectType,\n    isExisting: app.exists(objName),\n    isDefined: app.isDefined(objName),\n    objectNumber: app.getObjectNumber(objName),\n    CASobjectNumber: app.getCASObjectNumber(objName),\n    layer: app.getLayer(objName),\n    lineStyle: app.getLineStyle(objName),\n    lineThickness: app.getLineThickness(objName),\n    pointStyle: app.getPointStyle(objName),\n    pointSize: app.getPointSize(objName),\n    filling: app.getFilling(objName),\n    caption: app.getCaption(objName),\n    labelStyle: app.getLabelStyle(objName),\n    isLabelVisible: app.getLabelVisible(objName),\n    isIndependent: app.isIndependent(objName),\n    isMoveable: app.isMoveable(objName)\n  }\n\n  return element\n}\n\nexport * from './addElementListener'\nexport * from './removeElementListener'\nexport * from './renameElementListener'\nexport * from './updateElementListener'\nexport * from './clientEventsListener'\n","import {\n  bindActionCreators,\n  Store,\n  ActionCreator,\n  ActionCreatorsMapObject\n} from 'redux'\nimport {\n  useStore as useStoreRedux,\n  useSelector,\n  useDispatch as reduxUseDispatch,\n  TypedUseSelectorHook\n} from 'react-redux'\nimport { useMemo } from 'react'\n\nimport { ReactGeoGebraDispatch } from '.'\nimport * as actions from './actions'\nimport { ReactGeoGebraAction } from './actions'\nimport { ReactGeoGebraState } from '../types'\n\nexport const useTypedSelector: TypedUseSelectorHook<ReactGeoGebraState> =\n  useSelector\nexport type ActionCreatorSelector<Action> = (\n  acts: typeof actions\n) => ActionCreator<Action>\n\nexport type ActionMapObjectSelector<Action> = (\n  acts: typeof actions\n) => ActionCreatorsMapObject<Action>\n\nexport type ActionSelector<Action> = (\n  acts: typeof actions\n) => ActionCreatorsMapObject<Action> | ActionCreator<Action>\n\nexport function useStoreActions<Action extends ReactGeoGebraAction>(\n  actionSelector: ActionCreatorSelector<Action>\n): ActionCreator<Action>\n\nexport function useStoreActions<Action extends ReactGeoGebraAction>(\n  actionSelector: ActionMapObjectSelector<Action>\n): ActionCreatorsMapObject<Action>\n\nexport function useStoreActions<Action extends ReactGeoGebraAction>(\n  actionSelector: ActionSelector<Action>\n) {\n  const dispatch: ReactGeoGebraDispatch = reduxUseDispatch()\n  const currAction = actionSelector(actions)\n\n  const action = useMemo(() => {\n    // this looks weird but required if both ActionSelector and ActionMapObjectSelector are supported\n    return typeof currAction === 'function'\n      ? bindActionCreators(currAction, dispatch)\n      : bindActionCreators(currAction, dispatch)\n  }, [dispatch, currAction])\n\n  return action\n}\n\nexport const useStoreState = useTypedSelector\nexport const useStore = (): Store<ReactGeoGebraState, ReactGeoGebraAction> => {\n  const store = useStoreRedux<ReactGeoGebraState, ReactGeoGebraAction>()\n  return store\n}\nexport const useDispatch: ReactGeoGebraDispatch = reduxUseDispatch\n","import React, { useEffect, useState, useRef } from 'react'\nimport { setScript } from '../../util'\nimport { GeoGebraParameters } from '../../types'\nimport {\n  addElementListener,\n  clientEventListener,\n  removeElementListener,\n  renameElementListener,\n  updateElementListener\n} from '../../util/GeoGebraListener'\nimport { useStore } from '../../store/hooks'\nimport { initializeStore } from '../../util/GeoGebraStoreManagement'\n\nconst Geogebra: React.FC<GeoGebraParameters> = (props) => {\n  const refProps = useRef(props)\n\n  let { id, LoadComponent, onReady, appletOnLoad, debug } = refProps.current\n  if (!id) {\n    id = 'ggb-applet'\n  }\n  if (!debug) {\n    debug = false\n  }\n  //If a JSX Component is not given as a prop, use h3 with children\n  if (!LoadComponent) {\n    LoadComponent = ({ children }) => <h3>{children}</h3>\n  }\n\n  const url = 'https://geogebra.org/apps/deployggb.js'\n  const [deployggbLoaded, setDeployggbLoaded] = useState(false)\n  const [loading, setLoading] = useState(true)\n  const [watchPropsChange, setWatchPropsChange] = useState(false)\n  const store = useStore()\n  //gets called by GeoGebra after the Applet is ready\n  const onAppletReady = () => {\n    if (appletOnLoad) appletOnLoad()\n    const app = window[id as any]\n    if (!app) return\n    //initial State management-------------------------------------------\n\n    initializeStore(app, store)\n    //add Store Listeners -----------------------------------------------\n    addElementListener(app, store)\n    removeElementListener(app, store)\n    renameElementListener(app, store)\n    updateElementListener(app, store)\n    clientEventListener(app, store)\n    //-------------------------------------------------------------------\n    if (onReady) onReady()\n    debug && console.log(`Applet with id \"${id}\" is ready`)\n  }\n\n  useEffect(() => {\n    !deployggbLoaded &&\n      setScript(url, id)\n        .then(() => {\n          debug &&\n            console.log(`script from \"${url}\" succesfull loaded into the DOM`)\n          setDeployggbLoaded(true)\n        })\n        .catch((err) => console.error(err))\n\n    return () => {\n      setDeployggbLoaded(false)\n      // removeScript(id)\n      const tag = document.getElementById(`${id}-holder`)\n      if (tag && tag.lastChild) {\n        tag.lastChild.textContent = ''\n      }\n      //unregisterListeners\n    }\n  }, [])\n  useEffect(() => {\n    if (window.GGBApplet) {\n      const parameter = JSON.parse(JSON.stringify(refProps.current))\n      parameter.appletOnLoad = onAppletReady\n      const ggbApp = new window.GGBApplet(parameter, true)\n      ggbApp.inject(id)\n      setLoading(false)\n      setWatchPropsChange(false)\n      debug &&\n        console.log(`applet with id \"${id}\" succesfull injected into the DOM`)\n    }\n    return () => {\n      const tag = document.getElementById(`${id}-holder`)\n      if (tag && tag.lastChild) {\n        tag.lastChild.textContent = ''\n      }\n    }\n  }, [deployggbLoaded, watchPropsChange])\n\n  return (\n    <div id={`${id}-holder`}>\n      {loading && <LoadComponent>Loading</LoadComponent>}\n      <div id={id}></div>\n    </div>\n  )\n}\n\nGeogebra.defaultProps = {\n  appName: 'classic',\n  width: 800,\n  height: 600,\n  showToolBar: true,\n  showAlgebraInput: true,\n  showMenuBar: true\n}\n\nexport default Geogebra\n","import { AnyAction, Store } from 'redux'\nimport { getElementFromGeoGebraApp } from '.'\nimport * as actions from '../../store/actions'\n\nexport const addElementListener = (app: any, store: Store<any, AnyAction>) => {\n  if (!app) return\n  app.registerAddListener((objName: string) => {\n    const element = getElementFromGeoGebraApp(app, objName)\n    //actions.addElementToStore(element)\n    store.dispatch(actions.addElementToStore(element))\n  })\n}\n","import { AnyAction, Store } from 'redux'\nimport * as actions from '../../store/actions'\n\nexport const removeElementListener = (\n  app: any,\n  store: Store<any, AnyAction>\n) => {\n  if (!app) return\n  app.registerRemoveListener((objName: string) => {\n    store.dispatch(actions.removeElementFromStore(objName))\n  })\n}\n","import { AnyAction, Store } from 'redux'\nimport * as actions from '../../store/actions'\n\nexport const renameElementListener = (\n  app: any,\n  store: Store<any, AnyAction>\n) => {\n  if (!app) return\n  app.registerRenameListener((oldName: string, newName: string) => {\n    store.dispatch(actions.renameElementInStore({ oldName, newName }))\n  })\n}\n","import * as actions from '../../store/actions'\nimport { getElementFromGeoGebraApp } from '.'\nimport { throttle } from 'throttle-debounce'\nimport { AnyAction, Store } from 'redux'\n\nexport const updateElementListener = (\n  app: any,\n  store: Store<any, AnyAction>\n) => {\n  if (!app) return\n\n  const throttledUpdateFunc = throttle(250, false, (objName: string) => {\n    const element = getElementFromGeoGebraApp(app, objName)\n    store.dispatch(actions.updateElementInStore(element))\n  })\n\n  app.registerUpdateListener(throttledUpdateFunc)\n}\n","export const setScript = (\n  url: string,\n  id: string\n): Promise<HTMLScriptElement> =>\n  new Promise((resolve, reject) => {\n    let ready = false\n    if (!document) {\n      reject(new Error('Document was not defined'))\n    }\n\n    const tag = document.getElementsByTagName('script')[0]\n    const script = document.createElement('script')\n\n    script.crossOrigin = ''\n    script.id = `${id}-script`\n    script.type = 'text/javascript'\n    script.src = url\n    script.onload = () => {\n      if (!ready) {\n        ready = true\n        resolve(script)\n      }\n    }\n\n    script.onerror = (msg) => {\n      reject(new Error('Error loading script: ' + msg))\n    }\n\n    script.onabort = (msg) => {\n      reject(new Error('Script loading aborted: ' + msg))\n    }\n\n    if (tag.parentNode != null) {\n      //tag.parentNode.insertBefore(script, tag);\n      tag.parentNode.insertBefore(script, tag)\n    }\n  })\n","import { ReactGeoGebraState } from '../types'\nimport { initialState } from './index'\nimport * as constants from './constants'\nimport { ReactGeoGebraAction } from './actions'\n\nconst reactGeogebraReducer = (\n  state = initialState,\n  action: ReactGeoGebraAction\n): ReactGeoGebraState => {\n  switch (action.type) {\n    case constants.ADD_ELEMENT_TO_STORE: {\n      const geoGebraElement = action.payload\n      if (!geoGebraElement) return state\n      if (state.elements.map((el) => el.name).includes(geoGebraElement.name))\n        return state\n\n      const newState: ReactGeoGebraState = {\n        ...state,\n        elements: state.elements.concat(geoGebraElement)\n      }\n      return newState\n    }\n    case constants.REMOVE_ELEMENT_FROM_STORE: {\n      const name = action.payload\n      if (!name) return state\n      const newState: ReactGeoGebraState = {\n        ...state,\n        elements: state.elements.filter((element) => element.name !== name)\n      }\n      return newState\n    }\n    case constants.RENAME_ELEMENT_IN_STORE: {\n      const rename = action.payload\n      if (!rename) return state\n      const newState: ReactGeoGebraState = {\n        ...state,\n        elements: state.elements.map((element) => {\n          return {\n            ...element,\n            name:\n              element.name === rename.oldName ? rename.newName : element.name\n          }\n        })\n      }\n      return newState\n    }\n    case constants.UPDATE_ELEMENT_IN_STORE: {\n      const updatedElement = action.payload\n      if (!updatedElement) return state\n      const newState: ReactGeoGebraState = {\n        ...state,\n        elements: state.elements.map((element) => {\n          return element.name === updatedElement.name ? updatedElement : element\n        })\n      }\n      return newState\n    }\n    case constants.ADD_NAME_TO_SELECTED_ELEMENTS: {\n      const name = action.payload\n      if (!name) return state\n      if (state.selectedElementNames.find((selEl) => selEl === name))\n        return state\n      const newState: ReactGeoGebraState = {\n        ...state,\n        selectedElementNames: state.selectedElementNames\n          ? state.selectedElementNames.concat(name)\n          : [name]\n      }\n      return newState\n    }\n    case constants.REMOVE_NAME_FROM_SELECTED_ELEMENTS: {\n      const newState: ReactGeoGebraState = {\n        ...state,\n        selectedElementNames: []\n      }\n      return newState\n    }\n    case constants.REMOVE_ELEMENTS_AT_CANCEL: {\n      const names = action.payload\n      if (!names) return state\n      const intersectingElements = state.elements.filter((element) =>\n        names.includes(element.name)\n      )\n\n      const newState: ReactGeoGebraState = {\n        ...state,\n        elements: intersectingElements\n      }\n      return newState\n    }\n    case constants.SET_MODE_IN_STORE: {\n      const mode = action.payload\n      if (!mode) return state\n      const newState: ReactGeoGebraState = { ...state, mode }\n      return newState\n    }\n    case constants.SET_PERSPECTIVE_IN_STORE: {\n      const perspective = action.payload\n      if (!perspective) return state\n      const newState: ReactGeoGebraState = { ...state, perspective }\n      return newState\n    }\n    case constants.SET_MOUSEDOWN_IN_STORE: {\n      const mouseDown = action.payload\n      if (!mouseDown) return state\n      return { ...state, mouseDown }\n    }\n    case constants.SET_EUCLIDIANVIEWS_IN_STORE: {\n      const euclidianViews = action.payload\n      if (!euclidianViews) return state\n      return { ...state, euclidianViews }\n    }\n    case constants.SET_EUCLIDIANVIEW3D_IN_STORE: {\n      const euclidianView3D = action.payload\n      if (!euclidianView3D) return state\n      return { ...state, euclidianView3D }\n    }\n    case constants.SET_ALGEBRAVIEW_IN_STORE: {\n      const algebraView = action.payload\n      if (!algebraView) return state\n      return { ...state, algebraView }\n    }\n    case constants.SET_SPREADSHEETVIEW_IN_STORE: {\n      const spreadsheetView = action.payload\n      if (!spreadsheetView) return state\n      return { ...state, spreadsheetView }\n    }\n    case constants.SET_PROBABILITYCALCULATOR_IN_STORE: {\n      const probabilityCalculator = action.payload\n      if (!probabilityCalculator) return state\n      return { ...state, probabilityCalculator }\n    }\n    case constants.ON_APPLET_LOADED:\n    default:\n      return state\n  }\n}\n\nexport default reactGeogebraReducer\n","import { createStore, Store } from 'redux'\nimport { ReactGeoGebraAction } from './actions'\nimport { ReactGeoGebraState } from '../types'\nimport reactGeogebraReducer from './reducer'\n\nexport default function configureStore(\n  preloadedState: ReactGeoGebraState\n): Store<ReactGeoGebraState, ReactGeoGebraAction> {\n  const store = createStore(reactGeogebraReducer, preloadedState)\n  return store\n}\n","import { Store } from 'redux'\nimport { ReactGeoGebraState } from '../types'\nimport { MODE_MOVE } from '../util/mode-constants'\nimport configureStore from './configure-store'\n\nconst initialId = 'ggbApplet'\nexport const initialState: ReactGeoGebraState = {\n  id: initialId,\n  elements: [],\n  selectedElementNames: [],\n  params: {\n    id: initialId,\n    width: 800,\n    height: 600,\n    showAlgebraInput: true,\n    showToolBar: true,\n    showMenuBar: true\n  },\n  mode: MODE_MOVE,\n  perspective: undefined,\n  editorState: { content: '', caret: [0] },\n  mouseDown: undefined\n}\n\nconst store: Store = configureStore(initialState)\n\nexport type ReactGeoGebraDispatch = typeof store.dispatch\nexport default store\n","/** Move */\nexport const MODE_MOVE = 0\n\n/** New Point */\nexport const MODE_POINT = 1\n\n/** Line through Two Points */\nexport const MODE_JOIN = 2\n\n/** Parallel Line */\nexport const MODE_PARALLEL = 3\n\n/** Perpendicular Line */\nexport const MODE_ORTHOGONAL = 4\n\n/** Intersect Two Objects */\nexport const MODE_INTERSECT = 5\n\n/** Delete Object */\nexport const MODE_DELETE = 6\n\n/** Vector between Two Points */\nexport const MODE_VECTOR = 7\n\n/** Perpendicular Bisector */\nexport const MODE_LINE_BISECTOR = 8\n\n/** Angle Bisector */\nexport const MODE_ANGULAR_BISECTOR = 9\n\n/** Circle with Center through Point */\nexport const MODE_CIRCLE_TWO_POINTS = 10\n\n/** Circle through Three Points */\nexport const MODE_CIRCLE_THREE_POINTS = 11\n\n/** Conic through Five Points */\nexport const MODE_CONIC_FIVE_POINTS = 12\n\n/** Tangents */\nexport const MODE_TANGENTS = 13\n\n/** Relation between Two Objects */\nexport const MODE_RELATION = 14\n\n/** Segment between Two Points */\nexport const MODE_SEGMENT = 15\n\n/** Polygon */\nexport const MODE_POLYGON = 16\n\n/** Insert Text */\nexport const MODE_TEXT = 17\n\n/** Ray through Two Points */\nexport const MODE_RAY = 18\n\n/** Midpoint or Center */\nexport const MODE_MIDPOINT = 19\n\n/** Circular Arc with Center between Two Points */\nexport const MODE_CIRCLE_ARC_THREE_POINTS = 20\n\n/** Circular Sector with Center between Two Points */\nexport const MODE_CIRCLE_SECTOR_THREE_POINTS = 21\n\n/** Circumcircular Arc through Three Points */\nexport const MODE_CIRCUMCIRCLE_ARC_THREE_POINTS = 22\n\n/** Circumcircular Sector through Three Points */\nexport const MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS = 23\n\n/** Semicircle through Two Points */\nexport const MODE_SEMICIRCLE = 24\n\n/** Slider */\nexport const MODE_SLIDER = 25\n\n/** Insert Image */\nexport const MODE_IMAGE = 26\n\n/** Show / Hide Object */\nexport const MODE_SHOW_HIDE_OBJECT = 27\n\n/** Show / Hide Label */\nexport const MODE_SHOW_HIDE_LABEL = 28\n\n/** Reflect Object about Point */\nexport const MODE_MIRROR_AT_POINT = 29\n\n/** Reflect Object about Line */\nexport const MODE_MIRROR_AT_LINE = 30\n\n/** Translate Object by Vector */\nexport const MODE_TRANSLATE_BY_VECTOR = 31\n\n/** Rotate Object around Point by Angle */\nexport const MODE_ROTATE_BY_ANGLE = 32\n\n/** Dilate Object from Point by Factor */\nexport const MODE_DILATE_FROM_POINT = 33\n\n/** Circle with Center and Radius */\nexport const MODE_CIRCLE_POINT_RADIUS = 34\n\n/** Copy Visual Style */\nexport const MODE_COPY_VISUAL_STYLE = 35\n\n/** Angle */\nexport const MODE_ANGLE = 36\n\n/** Vector from Point */\nexport const MODE_VECTOR_FROM_POINT = 37\n\n/** Distance or Length */\nexport const MODE_DISTANCE = 38\n\n/** Rotate around Point */\nexport const MODE_MOVE_ROTATE = 39\n\n/** Move Graphics View */\nexport const MODE_TRANSLATEVIEW = 40\n\n/** Zoom In */\nexport const MODE_ZOOM_IN = 41\n\n/** Zoom Out */\nexport const MODE_ZOOM_OUT = 42\n\n/** Select Object */\nexport const MODE_SELECTION_LISTENER = 43\n\n/** Polar or Diameter Line */\nexport const MODE_POLAR_DIAMETER = 44\n\n/** Segment with Given Length from Point */\nexport const MODE_SEGMENT_FIXED = 45\n\n/** Angle with Given Size */\nexport const MODE_ANGLE_FIXED = 46\n\n/** Locus */\nexport const MODE_LOCUS = 47\n/** Macro */\nexport const MODE_MACRO = 48\n\n/** Area */\nexport const MODE_AREA = 49\n\n/** Slope */\nexport const MODE_SLOPE = 50\n\n/** Regular Polygon */\nexport const MODE_REGULAR_POLYGON = 51\n\n/** Check Box to Show / Hide Objects */\nexport const MODE_SHOW_HIDE_CHECKBOX = 52\n// GeoGebra 3.2 start\n/** Compass */\nexport const MODE_COMPASSES = 53\n\n/** Reflect Object about Circle */\nexport const MODE_MIRROR_AT_CIRCLE = 54\n\n/** Ellipse */\nexport const MODE_ELLIPSE_THREE_POINTS = 55\n\n/** Hyperbola */\nexport const MODE_HYPERBOLA_THREE_POINTS = 56\n\n/** Parabola */\nexport const MODE_PARABOLA = 57\n\n/** Best Fit Line */\nexport const MODE_FITLINE = 58\n\n/** Record to Spreadsheet removed from GeoGebra 5 */\n// export const MODE_RECORD_TO_SPREADSHEET = 59;\n// GeoGebra 4.0 start\n/** Insert Button */\nexport const MODE_BUTTON_ACTION = 60\n\n/** Insert Input Box */\nexport const MODE_TEXTFIELD_ACTION = 61\n\n/** Pen Tool */\nexport const MODE_PEN = 62\n\n/** Visual Style, removed */\n// export const MODE_VISUAL_STYLE = 63;\n\n/** Rigid Polygon */\nexport const MODE_RIGID_POLYGON = 64\n\n/** PolyLine between Points */\nexport const MODE_POLYLINE = 65\n\n/** Probability Calculator */\nexport const MODE_PROBABILITY_CALCULATOR = 66\n\n/** Attach / Detach Point */\nexport const MODE_ATTACH_DETACH = 67\n\n/** Function Inspector */\nexport const MODE_FUNCTION_INSPECTOR = 68\n\n/** Intersect Two Surfaces */\nexport const MODE_INTERSECTION_CURVE = 69\n\n/** Vector Polygon */\nexport const MODE_VECTOR_POLYGON = 70\n\n/** Create List */\nexport const MODE_CREATE_LIST = 71\n\n/** Complex Number */\nexport const MODE_COMPLEX_NUMBER = 72\n\n/** Freehand */\nexport const MODE_FREEHAND_SHAPE = 73\n\n/** Freehand function */\nexport const MODE_FREEHAND_FUNCTION = 74\n\n/** Extremum */\nexport const MODE_EXTREMUM = 75\n\n/** Roots */\nexport const MODE_ROOTS = 76\n\n/** Select multiple objects */\nexport const MODE_SELECT = 77\n\n/** */\nexport const MODE_SELECT_MOW = 78\n\n/** Graspable Math tool */\nexport const MODE_GRASPABLE_MATH = 79\n\n/** Point on Object */\nexport const MODE_POINT_ON_OBJECT = 501\n\n// ggb3D start\n\n/** mode that change the view to be in front of selected plane */\nexport const MODE_VIEW_IN_FRONT_OF = 502\n\n/** creates a plane through three points */\nexport const MODE_PLANE_THREE_POINTS = 510\n\n/** creates a plane through three points */\nexport const MODE_PLANE = 511\n\n/** creates a plane orthogonal to a line */\nexport const MODE_ORTHOGONAL_PLANE = 512\n\n/** creates a plane parallel to another */\nexport const MODE_PARALLEL_PLANE = 513\n\n/** Perpendicular Line (for 3D view) */\nexport const MODE_ORTHOGONAL_THREE_D = 514\n\n/** creates a sphere with midpoint and radius */\nexport const MODE_SPHERE_POINT_RADIUS = 520\n\n/** creates a sphere with midpoint through another point */\nexport const MODE_SPHERE_TWO_POINTS = 521\n\n/**\n * creates a cone with center of basis, apex point and radius of the basis\n */\nexport const MODE_CONE_TWO_POINTS_RADIUS = 522\n\n/**\n * creates a cylinder with center of basis, apex point and radius of the\n * basis\n */\nexport const MODE_CYLINDER_TWO_POINTS_RADIUS = 523\n\n/**\n * creates a prism with basis and first vertex of the second parallel face\n */\nexport const MODE_PRISM = 531\n\n/** creates a prism/cylinder with basis and height */\nexport const MODE_EXTRUSION = 532\n\n/** creates a prism with basis and top vertex */\nexport const MODE_PYRAMID = 533\n\n/** creates a pyramid/cone with basis and height */\nexport const MODE_CONIFY = 534\n\n/** polyhedronNet */\nexport const MODE_NET = 535\n\n/** creates a cube */\nexport const MODE_CUBE = 536\n\n/** creates a tetrahedron */\nexport const MODE_TETRAHEDRON = 537\n\n/** creates a surface by revolving a line around x-axis */\nexport const MODE_SURFACE_OF_REVOLUTION = 538\n\n/** rotate the view */\nexport const MODE_ROTATEVIEW = 540\n\n/** circle with center, radius, direction */\nexport const MODE_CIRCLE_POINT_RADIUS_DIRECTION = 550\n\n/** circle with center, radius, direction */\nexport const MODE_CIRCLE_AXIS_POINT = 551\n\n/** volume */\nexport const MODE_VOLUME = 560\n\n/** Rotate Object around Axis by Angle */\nexport const MODE_ROTATE_AROUND_LINE = 570\n\n/** Reflect Object about Plane */\nexport const MODE_MIRROR_AT_PLANE = 571\n\n// CAS view modes\n/** Evaluate */\nexport const MODE_CAS_EVALUATE = 1001\n/** Numeric */\nexport const MODE_CAS_NUMERIC = 1002\n/** Keep Input */\nexport const MODE_CAS_KEEP_INPUT = 1003\n/** Expand */\nexport const MODE_CAS_EXPAND = 1004\n/** Factor */\nexport const MODE_CAS_FACTOR = 1005\n/** Substitute */\nexport const MODE_CAS_SUBSTITUTE = 1006\n/** Solve */\nexport const MODE_CAS_SOLVE = 1007\n/** Derivative */\nexport const MODE_CAS_DERIVATIVE = 1008\n/** Integral */\nexport const MODE_CAS_INTEGRAL = 1009\n/** Solve Numerically */\nexport const MODE_CAS_NUMERICAL_SOLVE = 1010\n// SpreadsheetView modes\n/** Create List */\nexport const MODE_SPREADSHEET_CREATE_LIST = 2001\n/** Create Matrix */\nexport const MODE_SPREADSHEET_CREATE_MATRIX = 2002\n/** Create List of Points */\nexport const MODE_SPREADSHEET_CREATE_LISTOFPOINTS = 2003\n/** Create Table */\nexport const MODE_SPREADSHEET_CREATE_TABLETEXT = 2004\n/** Create PolyLine */\nexport const MODE_SPREADSHEET_CREATE_POLYLINE = 2005\n\n/** One Variable Analysis */\nexport const MODE_SPREADSHEET_ONEVARSTATS = 2020\n/** Two Variable Regression Analysis */\nexport const MODE_SPREADSHEET_TWOVARSTATS = 2021\n/** Multiple Variable Analysis */\nexport const MODE_SPREADSHEET_MULTIVARSTATS = 2022\n/** Sort cells */\nexport const MODE_SPREADSHEET_SORT = 2030\n/** Sort cells increasingly */\nexport const MODE_SPREADSHEET_SORT_AZ = 2031\n/** Sort cells decreasingly */\nexport const MODE_SPREADSHEET_SORT_ZA = 2032\n\n/** Sum */\nexport const MODE_SPREADSHEET_SUM = 2040\n/** Mean */\nexport const MODE_SPREADSHEET_AVERAGE = 2041\n/** Count */\nexport const MODE_SPREADSHEET_COUNT = 2042\n/** Minimum */\nexport const MODE_SPREADSHEET_MIN = 2043\n/** Maximum */\nexport const MODE_SPREADSHEET_MAX = 2044\n\n/** WHITEBOARD TOOLS */\nexport const MODE_SHAPE_LINE = 101\n/** Triangle */\nexport const MODE_SHAPE_TRIANGLE = 102\n/** Square */\nexport const MODE_SHAPE_SQUARE = 103\n/** Rectangle */\nexport const MODE_SHAPE_RECTANGLE = 104\n/** Rounded rectangle */\nexport const MODE_SHAPE_RECTANGLE_ROUND_EDGES = 105\n/** Regular polygon */\nexport const MODE_SHAPE_PENTAGON = 106\n/** Freeform TODO same as normal polygon? */\nexport const MODE_SHAPE_FREEFORM = 107\n/** Circle */\nexport const MODE_SHAPE_CIRCLE = 108\n/** Ellipse */\nexport const MODE_SHAPE_ELLIPSE = 109\n/** Eraser */\nexport const MODE_ERASER = 110\n/** Highlighter */\nexport const MODE_HIGHLIGHTER = 111\n/** Pen Panel */\nexport const MODE_PEN_PANEL = 112\n/** Tools Panel */\nexport const MODE_TOOLS_PANEL = 113\n/** Media Panel */\nexport const MODE_MEDIA_PANEL = 114\n/** Video */\nexport const MODE_VIDEO = 115\n/** Audio */\nexport const MODE_AUDIO = 116\n/** Geogebra */\nexport const MODE_CALCULATOR = 117\n/** Camera */\nexport const MODE_CAMERA = 118\n/** PDF tool */\nexport const MODE_PDF = 119\n/** Extension embed */\nexport const MODE_EXTENSION = 120\n/** Text tool */\nexport const MODE_MEDIA_TEXT = 121\n/** Mask */\nexport const MODE_MASK = 122\n/** Table */\nexport const MODE_TABLE = 123\n/** Equation */\nexport const MODE_EQUATION = 124\n\n/** H5P tool */\nexport const MODE_H5P = 125\n\nexport const MODE_MIND_MAP = 126\n/** Ruler */\nexport const MODE_RULER = 127\n/** Protractor */\nexport const MODE_PROTRACTOR = 128\n\n/** macro tools ID offset */\nexport const MACRO_MODE_ID_OFFSET = 100001\n/** max delay between taps of a doublecklick */\nexport const DOUBLE_CLICK_DELAY = 300\n/** ignore drag until this many miliseconds after drag start */\nexport const DRAGGING_DELAY = 100\n/** ignore drag until this many miliseconds after drag start, for moving created point along\n * z axis */\nexport const DRAGGING_DELAY_FOR_MOVING_POINT_ALONG_Z = 200\n/** default size of delete tool rectangle in pixels */\nexport const DEFAULT_ERASER_SIZE = 20\n/** line thickness for pen (mow) */\nexport const DEFAULT_PEN_SIZE = 5\n/** min length of input box that allows display of symbol button */\nexport const SHOW_SYMBOLBUTTON_MINLENGTH = 8\n\n/** 13 in older files */\nexport const DEFAULT_CHECKBOX_SIZE = 26\n\n/**\n * min line thickness of highlighter\n */\nexport const MIN_PEN_HIGHLIGHTER_SIZE = 1\n/**\n * default step size to increase line thickness of pen/highlighter\n */\nexport const DEFAULT_PEN_STEP = 1\n/**\n * default opacity of highlighter (0.3)\n */\nexport const DEFAULT_HIGHLIGHTER_OPACITY = 77\n/**\n * default line thickness of highlighter\n */\nexport const DEFAULT_HIGHLIGHTER_SIZE = 20\n/**\n * max line thickness of highlighter\n */\nexport const MAX_PEN_HIGHLIGHTER_SIZE = 30\n","import React, { useMemo } from 'react'\nimport { Provider } from 'react-redux'\nimport { initialState } from '../../store'\nimport configureStore from '../../store/configure-store'\n\nexport interface ProviderProps {}\n\nconst ReactGeoGebraProvider: React.FC<ProviderProps> = ({ children }) => {\n  const store = useMemo(() => {\n    return configureStore(initialState)\n  }, [])\n\n  return <Provider store={store}>{children}</Provider>\n}\n\nReactGeoGebraProvider.displayName = 'ReactGeoGebraProvider'\n\nexport default ReactGeoGebraProvider\n","import Geogebra from './components/ReactGeoGebra'\nimport Provider from './components/ReactGeoGebraProvider'\n\nexport const ReactGeoGebraProvider = Provider\nexport const ReactGeoGebra = Geogebra\n\nexport * from './types'\nexport * from './store/hooks'\n","import React, { useEffect } from 'react'\nimport ReactJson from 'react-json-view'\nimport { ReactGeoGebra, useStoreState } from 'react-redux-geogebra'\nimport './App.css'\nconst App = () => {\n  const state = useStoreState((state) => state)\n\n  useEffect(() => {\n    console.log(state)\n  }, [state])\n\n  return (\n    <div className='app'>\n      <h1>React Redux GeoGebra Example</h1>\n      <ReactGeoGebra id='ggbApplet' width={800} />\n      <div className='container'>\n        <h2>Store State</h2>\n        <ReactJson src={state} name='state' />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { ReactGeoGebraProvider } from 'react-redux-geogebra'\nReactDOM.render(\n  <ReactGeoGebraProvider>\n    <App />\n  </ReactGeoGebraProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}